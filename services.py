import asyncio
import logging
import aiohttp
import openai
from config import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

openai.api_key = config.openai_api_key.get_secret_value()


class ChatGPTService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ChatGPT API.

    Attributes:
        model (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ GPT –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        temperature (float): –ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (0.0 - 1.0)

    Note:
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """

    def __init__(self, model="gpt-3.5-turbo", max_tokens=1000, temperature=0.7):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ ChatGPT.

        Args:
            model (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ GPT
            max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            temperature (float): –ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        """
        self.model = model
        self.max_tokens = max_tokens
        self.temperature = temperature

    async def get_response(self, message: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç ChatGPT –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API

        Note:
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç asyncio.to_thread –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API
        """
        try:
            prompt = f"{message}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            
            response = await asyncio.to_thread(
                openai.ChatCompletion.create,
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=self.max_tokens,
                temperature=self.temperature
            )
            
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."


class PokeAPIService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å PokeAPI.

    Attributes:
        base_url (str): –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
        session (aiohttp.ClientSession): –°–µ—Å—Å–∏—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

    Note:
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiohttp –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """

    def __init__(self, base_url="https://pokeapi.co/api/v2"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ PokeAPI.

        Args:
            base_url (str): –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
        """
        self.base_url = base_url
        self.session = None

    async def get_session(self) -> aiohttp.ClientSession:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.

        Returns:
            aiohttp.ClientSession: –°–µ—Å—Å–∏—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

        Note:
            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session

    async def get_pokemon_info(self, pokemon_name: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫–µ–º–æ–Ω–µ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏.

        Args:
            pokemon_name (str): –ò–º—è –ø–æ–∫–µ–º–æ–Ω–∞

        Returns:
            str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–µ–º–æ–Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API

        Note:
            –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–æ–∫–µ–º–æ–Ω–∞
        """
        try:
            session = await self.get_session()
            url = f"{self.base_url}/pokemon/{pokemon_name.lower()}"
            
            async with session.get(url) as response:
                if response.status == 404:
                    return f"–ü–æ–∫–µ–º–æ–Ω —Å –∏–º–µ–Ω–µ–º {pokemon_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                elif response.status != 200:
                    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫–µ–º–æ–Ω–µ."
                
                data = await response.json()
                
                info = (
                    f"üéÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–µ–º–æ–Ω–µ {data['name'].capitalize()}:\n\n"
                    f"üìä –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
                    f"‚Ä¢ ID: {data['id']}\n"
                    f"‚Ä¢ –†–æ—Å—Ç: {data['height']/10} –º\n"
                    f"‚Ä¢ –í–µ—Å: {data['weight']/10} –∫–≥\n\n"
                    f"üí™ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n"
                )
                
                abilities = [ability['ability']['name'] for ability in data['abilities']]
                info += "‚Ä¢ " + "\n‚Ä¢ ".join(abilities) + "\n\n"
                
                types = [t['type']['name'] for t in data['types']]
                info += f"üìã –¢–∏–ø—ã: {', '.join(types)}"
                
                return info
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫–µ–º–æ–Ω–µ: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫–µ–º–æ–Ω–µ."
        
        finally:
            if self.session and not self.session.closed:
                await self.session.close()
